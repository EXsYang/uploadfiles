1.请谈谈你对JVM的理解？Java8的虚拟机有什么更新？

	JVM是Java虚拟机的缩写，它是Java程序的运行环境。Java8的虚拟机相比于之前的版本有很多更新，其中最显著的是引入了元空间（Metaspace）的概念，取代了之前的永久代（PermGen）。元空间是Java8中新加入的一种内存区域，它可以直接与操作系统进行交互，而不需要通过JVM。此外，Java8的虚拟机还引入了一些新的垃圾收集器，例如G1和ZGC，以提高垃圾收集的效率 。
	
	Java 8中新增了一些类和方法，例如：Lambda表达式、Stream API、Optional类等。
	同时，Java 8中的虚拟机也有一些更新，例如：优化了垃圾回收机制、增加了对硬件的支持等
	
	Java8的虚拟机有以下更新：

	类数据共享：Java8引入了类数据共享机制，这意味着多个类可以访问同一个静态变量和方法，而不需要创建多个实例。
	字符串连接：Java8中，可以使用加号（+）来连接字符串，而不是使用旧的concat()方法。
	方法引用：Java8中，可以使用：:操作符来引用现有方法或构造函数。
	Optional类：Java8中引入了Optional类，它允许您更轻松地处理可能为null的值。
	新的日期和时间API：Java8中引入了新的日期和时间API，它提供了更好的日期和时间处理功能。


2.什么是OOM？什么是StackOverflowError? 有哪些方法分析？
	OOM是OutOfMemoryError的缩写，是指Java虚拟机在运行过程中，因为内存不足而无法为新的对象分配空间时抛出的异常。
	StackOverflowError是Java虚拟机栈溢出时抛出的异常。

	分析方法：可以通过查看错误日志，找到错误的位置和原因，然后根据具体情况进行解决。
	例如，如果是OOM异常，可以通过增加JVM堆内存大小来解决；
	如果是StackOverflowError异常，可以通过优化代码、减少递归深度等方式来解决问题。

		分析OOM和StackOverflowError的方法有很多，这里提供一些常用的方法：

		通过查看日志文件来确定错误发生的位置和原因。
		通过使用jmap命令来生成堆转储文件，以便进一步分析。
		通过使用jhat命令来生成线程转储文件，以便进一步分析。
		通过使用VisualVM等工具来进行分析。

3.JVM的常用参数调优你知道哪些？

	JVM的常用参数调优包括但不限于以下几个方面：

	堆内存大小设置：-Xms、-Xmx、-Xmn、-XX:NewSize、-XX:MaxNewSize等。
	垃圾回收器选择：Serial、Parallel、CMS、G1等。
	垃圾回收策略设置：-XX:+UseSerialGC、-XX:+UseParallelGC、-XX:+UseConcMarkSweepGC、-XX:+UseG1GC等。
	JIT编译器优化：-XX:+AggressiveOpts、-XX:+UseFastAccessorMethods等。
	线程池配置：-XX:ThreadStackSize、-XX:MaxPermSize、-XX:MaxMetaspaceSize等。


4.谈谈JVM中，对类加载器你的认识

	类加载器（Class Loader）是Java虚拟机的一部分，负责在运行时将class文件字节码的内容加载到内存中，
	并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，
	作为方法区中类数据的访问入口 。

	Java虚拟机中有三类加载器：
		启动类加载器（Bootstrap ClassLoader）、
		扩展类加载器（Extension ClassLoader）、
		应用程序类加载器（Application ClassLoader）。
===================================================================================================

新生区为啥需要Survivor区
	不就是新生代到老年代么，直接Eden到Old不好了吗？为啥要这么复杂？想想如果没有Survivor区，Eden区每进行一次MinorGC存活的对象就会被送到老年代，老年代很快就会被填满。而有很多对象虽然一次MinorGC没有消灭但其实也并不会蹦跶多久，或许第2次第3次就需要被清除。这时候移入老年区，很明显不是一个明智的决定。所以Survivor的存在意义就是减少被送到老年代的对象，进而减少FullGC的发生。Survivor的预筛选保证只有经历15次MinorGC还能在新生代中存活的对象，才会被送到老年代。



新生区为啥需要两个Survivor区，为什么8:1:1？
	设置两个Survivor区最大的好处就是解决内存碎片化。
假设Survivor如果只有一个区域会怎样？MinorGC执行后Eden区被清空了，存活的对象放到了Survivor区，而之前Survivor区中的对象，可能也有一些是需要被清除的。问题来了，这时候我们怎么清除它们？在这种场景下，我们只能标记清除，而我们知道标记清除最大的问题就是内存碎片，在新生代这种经常会消亡的区域，采用标记清除必然会让内存产生严重的碎片化。因为Survivor有2个区域，所以每次MinorGC，会将之前Eden区和From区中的存活对象复制到To区域。第二次MinorGC时，From与To职责兑换，这时候会将Eden区和To区中的存活对象再复制到From区域，以此反复。这种机制最大的好处就是，整个过程中，永远有一个Survivorspace是空的，另一个非空的Survivorspace是无碎片的。那么，Survivor为什么不分更多块呢？比方说分成三个、四个、五个?显然，如果Survivor区再细分下去，每一块的空间就会比较小，容易导致Survivor区满，两块Survivor区是经过权衡之后的最佳方案。


===================================================================================================
吞吐量还是响应时间？

	首先引入两个概念：吞吐量和低延迟
	 
	吞吐量 = CPU在用户应用程序运行的时间 / （CPU在用户应用程序运行的时间 + CPU垃圾回收的时间）
	响应时间 = 平均每次的GC的耗时
	通常，吞吐优先还是响应优先这个在JVM中是一个两难之选。
	 
	堆内存增大，gc一次能处理的数量变大，吞吐量大；但是gc一次的时间会变长，导致后面排队的线程等待时间变长；
	相反，
	如果堆内存小，gc一次时间短，排队等待的线程等待时间变短，延迟减少，但一次请求的数量变小（并不绝对符合）。
	无法同时兼顾，是吞吐优先还是响应优先，这是一个需要权衡的问题。

CMS和G1？
----------------------------------------------------------------------------------------------------------------------------------
|    参数	               |     新生代垃级收集器	    |    新生代算法	       |  老年代垃圾收集器	                 | 老年代算法|
----------------------------------------------------------------------------------------------------------------------------------
| -XX:+UseConcMarkSweepGC  |	    ParNew	            |        复制	       |       CMS + Serial Old的收集器组合  |   标清    |
|                          |                            |                      |  (Serial Old作为CMS出错的后备收集器)|           |
|						   |							|		               |   经典的低停顿搜集器，绝大多数商用、|           |
|						   |							|		               |   延时敏感的服务在使用；	         |           |
---------------------------------------------------------------------------------------------------------------------------------|                          |                          |                            |                      |                                     |           |
| -XX:+UseG1GC	           | G1整体上采用标记-整理算法	| 局部是通过复制算法， |                                     |           |
|                          |                            | 不会产生内存碎片。   |		                             |           |
----------------------------------------------------------------------------------------------------------------------------------

响应优先：ParNew + CMS组合
	-XX:+UseParNewGC
	-XX:+UseConcMarkSweepGC

吞吐优先：G1回收器
	-XX:+UseG1GC


1.响应优先案例
	UseConcMarkSweepGC
	基于4C8G系统的ParNew+CMS回收器模板（响应优先），新生代大小根据业务灵活调整！

-Xms4g
-Xmx4g
-Xmn2g
-Xss1m
-XX:SurvivorRatio=8
-XX:MaxTenuringThreshold=10
-XX:+UseConcMarkSweepGC
-XX:CMSInitiatingOccupancyFraction=70 //老年代中对象达到这个比例后触发fullgc
-XX:+UseCMSInitiatingOccupancyOnly //老年代中对象达到这个比例后触发fullgc，每次
-XX:+AlwaysPreTouch //强制操作系统把内存真正分配给IVM，而不是用时才分配。
-XX:+HeapDumpOnOutOfMemoryError //在Out Of Memory，JVM快死掉的时候，输出Heap Dump到指定文件
-XX:HeapDumpPath=D:\myDump
-verbose:gc
-XX:+PrintGCDetails
-XX:+PrintGCDateStamps
-XX:+PrintGCTimeStamps
-Xloggc:gc.log


2.吞吐优先案例
如果是GC的吞吐优先，推荐使用G1，基于8C16G系统的G1回收器模板
-Xms8g
-Xmx8g
-Xss1m
-XX:+UseG1GC
-XX:MaxGCPauseMillis=150 //最大GC停顿时间默认200。柔性目标，JVM满足90%，不保证100%
-XX:InitiatingHeapOccupancyPercent=40 //当整个堆的空间使用百分比超过这个值时默认45，就会融发MixGC
-XX:+HeapDumpOnOutOfMemoryError
-verbose:gc
-XX:+PrintGCDetails
-XX:+PrintGCDateStamps
-XX:+PrintGCTimeStamps
-Xloggc:gc.log


























